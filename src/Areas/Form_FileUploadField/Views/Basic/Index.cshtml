@{
    ViewBag.Title = "FormPanel - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section headtag
{
    <style>
        #fi-button-msg {
            border: 2px solid #ccc;
            padding: 5px 10px;
            background: #eee;
            margin: 5px;
            float: left;
        }
    </style>

    <script>
        var showFile = function (fb, v) {
            if (v) {
                var el = Ext.get('fi-button-msg');
                el.update('<b>Selected:</b> ' + v);

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
        };
    </script>
}

@section example
{
    <h1>File Upload Field</h1>

    <h2>Basic FileUpload</h2>

    <p>A typical file upload field with Ext style.  Direct editing of the text field cannot be done in a
        consistent, cross-browser way, so it is always read-only in this implementation.</p>

    @(X.FileUploadField()
        .ID("BasicField")
        .Width(400)
        .Icon(Icon.Attach)
    )

    @(X.Button()
        .Text("Get File Path")
        .OnClientClick("var v = #{BasicField}.getValue(); Ext.Msg.alert('Selected&nbsp;File', v && v != '' ? v : 'None');")
    )

    <h2>Basic FileUpload (Button-only)</h2>

    <p>You can also render the file input as a button without the text field, with access to the field's value via the
            standard <tt>TextField</tt> interface or by handling the <tt>FileSelected</tt> event (as in this example).</p>

    @(X.FileUploadField()
        .ButtonOnly(true)
        .Listeners(l => l.Change.Fn = "showFile")
    )

    <div id="fi-button-msg" style="display:none;"></div>
    <div class="x-clear"></div>

    <h2>Form Example</h2>

    <p>The FileUploadField can also be used in standard form layouts, with support for anchoring, validation (the
        field is required in this example), empty text, etc.</p>

    <form id="fileUpload" enctype="multipart/form-data">
        @(X.FormPanel()
            .ID("BasicForm")
            .Width(500)
            .Frame(true)
            .Title("File Upload Form")
            .PaddingSpec("10px 10px 0 10px")
            .FieldDefaults(fd => fd.LabelWidth = 50)
            .Defaults(d => {
                    d.Add(new Parameter("anchor", "95%", ParameterMode.Value));
                    d.Add(new Parameter("allowBlank", "false", ParameterMode.Raw));
                    d.Add(new Parameter("msgTarget", "side", ParameterMode.Value));
            })
            .Items(
                X.TextField()
                    .ID("PhotoName")
                    .FieldLabel("Name"),

                X.FileUploadField()
                    .ID("FileUploadField1")
                    .EmptyText("Select an image")
                    .FieldLabel("Photo")
                    .ButtonText("")
                    .Icon(Icon.ImageAdd)
            )
            .Listeners(l => l.ValidityChange.Handler = "#{SaveButton}.setDisabled(!valid);")
            .Buttons(
                X.Button()
                    .ID("SaveButton")
                    .Text("Save")
                    .Disabled(true)
                    .DirectEvents(de => {
                        de.Click.Url = Url.Action("UploadClick");
                        de.Click.FormID = "fileUpload";
                        de.Click.Before = @"if (!#{BasicForm}.getForm().isValid()) { return false; }
                            Ext.Msg.wait('Uploading your photo...', 'Uploading');";
                        de.Click.Failure = @"Ext.Msg.show({
                                title   : 'Error',
                                msg     : 'Error during uploading',
                                minWidth: 200,
                                modal   : true,
                                icon    : Ext.Msg.ERROR,
                                buttons : Ext.Msg.OK
                            });";
                    }),

                X.Button()
                    .Text("Reset")
                    .OnClientClick("#{BasicForm}.getForm().reset();")
            )
        )
    </form>
}