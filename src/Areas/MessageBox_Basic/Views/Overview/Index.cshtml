@{
    ViewBag.Title = "MessageBox - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section headtag
{
    <script src="@Url.Content("~/resources/js/examples.js")" type="text/javascript"></script>

    <script>
        var showResult = function (btn) {
            Ext.Msg.notify("Button Click", "You clicked the " + btn + " button");
        };

        var showResultText = function (btn, text) {
            Ext.Msg.notify("Button Click", "You clicked the " + btn + 'button and entered the text "' + text + '".');
        };
    </script>

    <style>
        .x-window-dlg .ext-mb-download {
            background : transparent url(resources/images/download.gif) no-repeat top left;
            height : 46px;
        }
    </style>
}

@section example
{
    <h1>MessageBox Dialogs</h1>

    <p>The following samples demonstrate how to display various MessageBox options.</p>

    <h2>1. Confirm</h2>

    <span>Standard Yes/No dialog.</span>

    @(X.Button()
        .ID("Button1")
        .Text("Show")
        .DirectClickAction("Button1_Click")
    )

    <h2>2. Prompt</h2>

    <span>Standard prompt dialog.</span>

    @(X.Button()
        .ID("Button2")
        .Text("Show")
        .DirectClickAction("Button2_Click")
    )

    <h2>3. Multi-line Prompt</h2>

    <span>A multi-line prompt dialog.</span>

    @(X.Button()
        .ID("Button3")
        .Text("Show")
        .DirectClickAction("Button3_Click")
    )

    <h2>4. Yes/No/Cancel</h2>

    <span>Standard Yes/No/Cancel dialog.</span>

    @(X.Button()
        .ID("Button4")
        .Text("Show")
        .DirectClickAction("Button4_Click")
    )

    <h2>5. Progress Dialog</h2>

    <span>Dialog with measured progress bar.</span>

    @(X.Button()
        .ID("Button5")
        .Text("Show")
        .DirectClickAction("Button5_Click")
    )

    @(X.TaskManager()
        .ID("TaskManager1")
        .Tasks(X.Task()
            .TaskID("Task1")
            .Interval(1000)
            .AutoRun(false)
            .DirectEvents(de => de.Update.Action = "RefreshProgress")
        )
    )

    <h2>6. Wait Dialog</h2>

    <span>Dialog with indefinite ProgressBar and custom Icon (will close after 8 sec).</span>

    @(X.Button()
        .ID("Button6")
        .Text("Show")
        .DirectClickAction("Button6_Click")
    )

    <h2>7. Alert</h2>

    <span>Standard Alert dialog.</span>

    @(X.Button()
        .ID("Button7")
        .Text("Show")
        .DirectClickAction("Button7_Click")
    )

    <h2>8. Icons</h2>

    <span>Standard Alert with optional Icon.</span>

    @(X.ComboBox()
        .ID("ComboBox1")
        .Editable(false)
        .Items(
            X.ListItem().Text("Error").Value("ERROR"),
            X.ListItem().Text("Informational").Value("INFO"),
            X.ListItem().Text("Question").Value("QUESTION"),
            X.ListItem().Text("Warning").Value("WARNING")
        )
        .SelectedItems(
            X.ListItem().Value("ERROR")
        )
    )

    @(X.Button()
        .ID("Button8")
        .Text("Show")
        .DirectEvents(de => {
            de.Click.Action = "Button8_Click";
            de.Click.ExtraParams.Add(new Parameter("Icon", "#{ComboBox1}.getValue()", ParameterMode.Raw));
        })
    )
}