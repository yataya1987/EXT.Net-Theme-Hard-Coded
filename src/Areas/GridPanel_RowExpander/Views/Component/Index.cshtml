@model System.Collections.IEnumerable

@{
    ViewBag.Title = "RowExpander with FormPanel Detail";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}

@section headtag
{
    <style>
        .white-footer .x-toolbar-footer{
          background-color: white !important;
       }
    </style>

    <script>
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };
    </script>
}

@section example
{
    <h1>RowExpander Plugin with FormPanel Detail</h1>

    @(Html.X().GridPanel()
            .Title("Expander Rows with control")
            .Icon(Icon.Table)
            .Width(800)
            .Store(Html.X().Store()
                .DataSource(Model)
                .PageSize(10)
                .Model(Html.X().Model()
                    .Fields(
                         Html.X().ModelField().Name("company"),
                         Html.X().ModelField().Name("price").Type(ModelFieldType.Float),
                         Html.X().ModelField().Name("change").Type(ModelFieldType.Float),
                         Html.X().ModelField().Name("pctChange").Type(ModelFieldType.Float),
                         Html.X().ModelField().Name("lastChange").Type(ModelFieldType.Date).DateFormat("M/d hh:mmtt"),
                         Html.X().ModelField().Name("industry")
                    )
                )
            )
            .ColumnModel(
                Html.X().Column().DataIndex("company").Text("Company").Flex(1),
                Html.X().Column().DataIndex("price").Text("Price").Renderer(RendererFormat.UsMoney),
                Html.X().Column().DataIndex("change").Text("Change").Renderer("change"),
                Html.X().Column().DataIndex("pctChange").Text("Change").Renderer("pctChange"),
                Html.X().DateColumn().DataIndex("lastChange").Text("Last Updated").Width(105)
            )
            .BottomBar(Html.X().PagingToolbar().HideRefresh(true))
            .Plugins(
                Html.X().RowExpander()
                    .SingleExpand(false)
                    .Component(
                        Html.X().FormPanel()
                            .BodyPadding(6)
                            .Border(false)
                            .DefaultAnchor("-5")
                            .Cls("white-footer")
                            .Items(
                                Html.X().TextField().Name("company").FieldLabel("Company"),
                                Html.X().NumberField().Name("price").FieldLabel("Price"),
                                Html.X().NumberField().Name("change").FieldLabel("Change"),
                                Html.X().NumberField().Name("pctChange").FieldLabel("% Change"),
                                Html.X().DateField().Name("lastChange").FieldLabel("Last Updated")
                            )
                            .Buttons(
                                Html.X().Button()
                                    .Text("Save")
                                    .Icon(Icon.Disk)
                                    .Handler(@"
                                        var grid = this.up('grid'), form = this.up('form');
                                        grid.getRowExpander().collapseRow(grid.store.indexOf(form.record));
                                        form.getForm().updateRecord(form.record);
                                    "),

                                Html.X().Button()
                                    .Text("Cancel")
                                    .Icon(Icon.Decline)
                                    .Handler(@"
                                        var grid = this.up('grid'), form = this.up('form');
                                        grid.getRowExpander().collapseRow(grid.store.indexOf(form.record));
                                    ")
                            )
                            .Listeners(l =>
                            {
                                l.AfterRender.Handler = "this.getForm().loadRecord(this.record);";
                            })
                    )
            )
    )
}